openapi: 3.0.0
info:
  title: Inspection System API
  version: 1.1.0
servers:
  - url: https://api.example.com/v1
paths:
  /auth/login:
    post:
      summary: Вход пользователя
      description: Эндпоинт для аутентификации пользователя и получения JWT токенов
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email пользователя
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: Пароль пользователя
                  example: "secure_password123"
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access токен
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ItCY0LLQsNC9INCf0LXRgtGA0L7QsiIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token:
                    type: string
                    description: JWT refresh токен для обновления access токена
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ItCY0LLQsNC9INCf0LXRgtGA0L7QsiIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: "Invalid credentials"
  /auth/reset-password-request:
    post:
      summary: Запрос на восстановление пароля
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Письмо отправлено
        '400':
          description: Ошибка обработки запроса
  /auth/refresh:
    post:
      summary: Обновление JWT токена
      description: Эндпоинт для обновления access токена с использованием refresh токена
      tags:
        - Аутентификация
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Успешное обновление токена
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Новый JWT access токен
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ItCY0LLQsNC9INCf0LXRgtGA0L7QsiIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    description: Сообщение об ошибке
                    example: "Token has expired"
  /auth/reset-password-confirm:
    post:
      summary: Подтверждение восстановления пароля
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                code:
                  type: string
                  minLength: 6
                  maxLength: 6
      responses:
        '200':
          description: Пароль обновлён
        '400':
          description: Неверный код
  /clients:
    post:
      summary: Регистрация нового клиента
      description: Эндпоинт для регистрации нового клиента и создания пользователя с ролью owner
      tags:
        - Клиенты
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - tin
                - type
                - сode
              properties:
                email:
                  type: string
                  format: email
                  description: Email клиента и владельца
                  example: "company@example.com"
                password:
                  type: string
                  format: password
                  description: Пароль для создаваемого пользователя-владельца
                  example: "secure_password123"
                tin:
                  type: string
                  description: ИНН клиента
                  example: "7712345678"
                type:
                  type: string
                  enum: [ "legal person", "individual" ]
                  description: Тип клиента (юридическое или физическое лицо)
                  example: "legal person"
                code:
                  type: string
                  minLength: 6
                  maxLength: 6
                  description: Код подтверждения с электронной почты
                  example: "412874"
      responses:
        '201':
          description: Клиент успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Сообщение об успешной регистрации
                    example: "Клиент зарегистрирован"
        '400':
          description: Ошибка при регистрации клиента
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки
                    example: "Invalid client data"
        '409':
          description: Клиент с таким email или ИНН уже существует или неправильный код подтверждения
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: "Invalid or expired verification code"
  /licenses:
    get:
      summary: Get available licenses
      responses:
        '200':
          description: List of licenses
    post:
      summary: Purchase a license
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseType:
                  type: string
                paymentMethod:
                  type: string
      responses:
        '201':
          description: License purchased
  /users:
    get:
      summary: Get users list
      responses:
        '200':
          description: List of users
  /users/{userId}/role:
    patch:
      summary: Update user role
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [ "admin", "moderator", "user" ]
      responses:
        '200':
          description: Role updated
  /users/{userId}:
    delete:
      summary: Delete a user account
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
  /users/sub-account:
    post:
      summary: Admin registers a sub-account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                color_theme:
                  type: string
                  enum: [ "light", "dark" ]
                font_size:
                  type: integer
      responses:
        '201':
          description: Sub-account created
  /cameras:
    get:
      summary: Получить список камер
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ "active", "inactive", "deleted" ]
      responses:
        '200':
          description: Список камер
    post:
      summary: Add a new camera
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                camera_url:
                  type: string
      responses:
        '201':
          description: Camera added
  /cameras/{id}/status:
    patch:
      summary: Изменить статус камеры
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [ "active", "inactive", "deleted" ]
      responses:
        '200':
          description: Статус обновлён
        '404':
          description: Камера не найдена
  /cameras/{id}:
    delete:
      summary: Удалить (пометить как удалённую) камеру
      responses:
        '200':
          description: Камера помечена как удалённая
  /inspections:
    post:
      summary: Провести инспекцию
      description: Эндпоинт для создания новой инспекции с загрузкой изображения
      tags:
        - Инспекции
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - batch_number
                - inspected_at
                - camera_name
                - image
              properties:
                batch_number:
                  type: string
                  description: Номер партии
                  example: "BATCH-001"
                inspected_at:
                  type: string
                  format: date-time
                  description: Дата и время проведения инспекции
                  example: "2025-04-29T15:45:00"
                camera_name:
                  type: string
                  description: Название камеры
                  example: "Main Entrance Camera"
                image:
                  type: string
                  format: binary
                  description: Изображение для инспекции
      responses:
        '200':
          description: Инспекция успешно создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Сообщение об успешной операции
                    example: "Inspection submitted"
        '400':
          description: Ошибка при создании инспекции
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки
                    example: "Invalid image format"
  /defects:
    get:
      summary: Get detected defects
      responses:
        '200':
          description: List of defects
  /ai/config:
    put:
      summary: Update AI defect sensitivity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sensitivity:
                  type: object
      responses:
        '200':
          description: AI settings updated
  /analytics/export:
    get:
      summary: Export analytics data
      parameters:
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [ "pdf", "excel" ]
      responses:
        '200':
          description: Экспортированный файл
  /analytics/summary:
    get:
      summary: Получить статистику клиента
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Сводная статистика
  /payments/create-session:
    post:
      summary: Создание сессии оплаты
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tariff_id:
                  type: integer
      responses:
        '201':
          description: Ссылка на оплату создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment_url:
                    type: string
                  amount:
                    type: integer
        '403':
          description: Доступ только для владельца
        '400':
          description: Ошибка создания платежа
  /payments/webhook:
    post:
      summary: Обработка уведомления об оплате от FreeKassa
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                MERCHANT_ID:
                  type: string
                AMOUNT:
                  type: string
                MERCHANT_ORDER_ID:
                  type: string
                SIGN:
                  type: string
      responses:
        '200':
          description: Успешно обработано (ожидается ответ YES)
        '400':
          description: Ошибка проверки подписи или данных