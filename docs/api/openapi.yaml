openapi: 3.0.0
info:
  title: Inspection System API
  version: 1.2.0
servers:
  - url: https://api.qwality.space
tags:
  - name: Аутентификация
    description: Операции, связанные с аутентификацией пользователей
  - name: Клиенты
    description: Операции, связанные с управлением клиентами
  - name: Пользователи
    description: Операции, связанные с управлением пользователями
  - name: Камеры
    description: Управление камерами и связанными операциями, включая корзину
  - name: Инспекции
    description: Проведение инспекций и получение результатов
  - name: Дефекты
    description: Управление дефектами и связанными операциями, включая корзину
paths:
  /auth/login:
    post:
      summary: Вход пользователя
      description: Эндпоинт для аутентификации пользователя и получения JWT токенов
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  description: Логин пользователя
                  example: "owner@example.com or moderatorlogin"
                password:
                  type: string
                  format: password
                  description: Пароль пользователя
                  example: "secure_password123"
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/send-registration-code:
    post:
      summary: Запрос на отправление email с кодом подтверждения почты
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
      responses:
        '200':
          description: Письмо отправлено
        '400':
          description: Ошибка обработки запроса
  /auth/reset-password-request:
    post:
      summary: Запрос на восстановление пароля
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
      responses:
        '200':
          description: Письмо отправлено
        '400':
          description: Ошибка обработки запроса
  /auth/reset-password-confirm:
    post:
      summary: Подтверждение восстановления пароля
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
                code:
                  type: string
                  minLength: 6
                  maxLength: 6
      responses:
        '200':
          description: Пароль обновлён
        '400':
          description: Неверный код
  /auth/refresh:
    post:
      summary: Обновление JWT токена
      description: Эндпоинт для обновления access токена с использованием refresh токена
      tags:
        - Аутентификация
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Успешное обновление токена
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Новый JWT access токен
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ItCY0LLQsNC9INCf0LXRgtGA0L7QsiIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    description: Сообщение об ошибке
                    example: "Token has expired"
  /clients:
    post:
      summary: Регистрация нового клиента
      description: Эндпоинт для регистрации нового клиента и создания пользователя с ролью owner
      tags:
        - Клиенты
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - tin
                - type
                - сode
              properties:
                email:
                  type: string
                  format: email
                  description: Email клиента и владельца
                  example: "company@example.com"
                password:
                  type: string
                  format: password
                  description: Пароль для создаваемого пользователя-владельца
                  example: "secure_password123"
                tin:
                  type: string
                  description: ИНН клиента
                  example: "7712345678"
                type:
                  type: string
                  enum: [ "legal person", "individual" ]
                  description: Тип клиента (юридическое или физическое лицо)
                  example: "legal person"
                code:
                  type: string
                  minLength: 6
                  maxLength: 6
                  description: Код подтверждения с электронной почты
                  example: "412874"
      responses:
        '201':
          description: Клиент успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Сообщение об успешной регистрации
                    example: "Клиент зарегистрирован"
        '400':
          description: Ошибка при регистрации клиента
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки
                    example: "Invalid client data"
        '409':
          description: Клиент с таким email или ИНН уже существует или неправильный код подтверждения
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: "Invalid or expired verification code"
  /clients/sensivity:
    patch:
      summary: Изменить чувствительность нейросети
      description: Изменить чувствительность нейросети на переданное значение у данного клиента
      tags:
        - Клиенты
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sensivity
              properties:
                email:
                  type: number
                  format: float
                  description: Новое значение чувствительности нейросети
                  example: 0.52
      responses:
        '200':
          description: Чувствительность успешно изменена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Сообщение об успешном изменении
                    example: "Чувствительность успешно изменена"
        '400':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки
                    example: "You aren't authorized"
        '409':
          description: Неверно передано значение чувствительности
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: "Sensivity must be between 0 and 1"
    get:
      summary: Получить текущую чувствительность нейросети
      description: Возвращает текущую чувствительность нейросети данного клиента.
      tags:
        - Пользователи
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: number
                format: float
                example: 0.27
        '400':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки
                    example: "You aren't authorized"
        '409':
          description: Найдено неверное значение чувствительности
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: "Sensivity must be between 0 and 1"
  /licenses:
    get:
      summary: Get available licenses
      responses:
        '200':
          description: List of licenses
    post:
      summary: Purchase a license
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseType:
                  type: string
                paymentMethod:
                  type: string
      responses:
        '201':
          description: License purchased
  /users:
    get:
      summary: Получить список пользователей
      description: Возвращает список пользователей, связанных с идентификатором аутентифицированного клиента.
      tags:
        - Пользователи
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Уникальный идентификатор пользователя
                      example: 1
                    login:
                      type: string
                      description: Логин пользователя или email для owner
                      example: userlogin or owner@example.com
                    role:
                      type: string
                      description: Роль пользователя
                      enum: ["owner", "admin", "moderator", "user" ]
                      example: admin
                    color_theme:
                      type: string
                      description: Предпочитаемая цветовая тема пользователя
                      enum: [ "light", "dark"]
                      example: dark
                    font_size:
                      type: string
                      description: Предпочитаемый размер шрифта пользователя
                      enum: [ "large", "medium", "small" ]
                      example: 14
                  required:
                    - id
                    - email
                    - role
  /users/me:
    get:
      summary: Получить данные текущего пользователя
      description: Возвращает информацию о текущем пользователе, включая идентификатор, электронную почту, роль, цветовую тему и размер шрифта.
      tags:
        - Пользователи
      responses:
        '200':
          description: Данные текущего пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Уникальный идентификатор пользователя
                    example: 1
                  email:
                    type: string
                    format: email
                    description: Электронная почта пользователя
                    example: user@example.com
                  role:
                    type: string
                    description: Роль пользователя
                    enum: ["owner", "admin", "moderator", "user"]
                    example: admin
                  color_theme:
                    type: string
                    description: Предпочитаемая цветовая тема пользователя
                    enum: ["light", "dark"]
                    example: dark
                  font_size:
                    type: string
                    description: Предпочитаемый размер шрифта пользователя
                    enum: ["large", "medium", "small"]
                    example: medium
  /users/{userId}:
    patch:
      summary: Обновить данные пользователя
      description: Обновляет данные указанного пользователя.
      tags:
        - Пользователи
      parameters:
        - name: userId
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [ "admin", "moderator", "user" ]
                  description: Новая роль пользователя
                  example: moderator
                color_theme:
                  type: string
                  enum: [ "dark", "light"]
                  description: Новая цветовая тема пользователя
                  example: dark
                font_size:
                  type: string
                  enum: [ "large", "medium", "small" ]
                  description: Новая размер шрифта пользователя
                  example: medium
      responses:
        '200':
          description: Данные обновлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Уникальный идентификатор пользователя
                    example: 1
                  login:
                    type: string
                    description: Логин пользователя
                    example: userLogin
                  role:
                    type: string
                    description: Роль пользователя
                    example: moderator
                  color_theme:
                    type: string
                    enum: [ "dark", "light" ]
                    description: Новая цветовая тема пользователя
                    example: dark
                  font_size:
                    type: string
                    enum: [ "large", "medium", "small" ]
                    description: Новая размер шрифта пользователя
                    example: medium
                required:
                  - id
                  - email
                  - role
                  - color_theme
                  - font_size
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Invalid input
                required:
                  - error
        '403':
          description: Недостаточно прав
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Cannot change role of equal or higher user
                required:
                  - error
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: User not found
                required:
                  - error
    delete:
      summary: Удалить учетную запись пользователя
      description: Удаляет учетную запись пользователя по указанному идентификатору.
      operationId: deleteUser
      tags:
        - Пользователи
      parameters:
        - name: userId
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Сообщение об успешном удалении
                    example: User deleted
                required:
                  - message
        '403':
          description: Недостаточно прав
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Cannot delete users with this role
                required:
                  - error
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: User not found
                required:
                  - error
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: An unexpected error occurred
                required:
                  - error
  /users/sub-account:
    post:
      summary: Создать суб-аккаунт
      description: Создает суб-аккаунт для пользователя с указанными данными.
      tags:
        - Пользователи
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: Логин суб-аккаунта
                  example: subuserlogin
                password:
                  type: string
                  description: Пароль суб-аккаунта (минимум 6 символов)
                  example: secure123
                role:
                  type: string
                  enum: [ "user", "admin", "moderator" ]
                  description: Роль суб-аккаунта
                  example: user
                  default: user
              required:
                - email
                - password
      responses:
        '201':
          description: Суб-аккаунт создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Уникальный идентификатор суб-аккаунта
                    example: 1
                  login:
                    type: string
                    description: Логин суб-аккаунта
                    example: subuserlogin
                  role:
                    type: string
                    description: Роль суб-аккаунта
                    example: user
                required:
                  - id
                  - email
                  - role
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Invalid input
                required:
                  - error
        '403':
          description: Недостаточно прав
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: you can't create sub-users
                required:
                  - error
  /cameras:
    get:
      summary: Получить список камер
      description: Возвращает список камер, связанных с клиентом.
      operationId: getCameras
      tags:
        - Камеры
      parameters:
        - name: status
          in: query
          required: false
          description: Фильтр по статусу камеры
          schema:
            type: string
            enum: [ "active", "non-active", "deleted" ]
      responses:
        '200':
          description: Список камер
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Уникальный идентификатор камеры
                      example: 1
                    name:
                      type: string
                      description: Название камеры
                      example: Camera 1
                    camera_url:
                      type: string
                      description: URL камеры
                      example: http://camera.example.com/stream
                    status:
                      type: string
                      description: Статус камеры
                      example: active
                    created_at:
                      type: string
                      format: date-time
                      description: Дата и время создания камеры
                      example: 2025-05-17T17:29:00Z
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Invalid status parameter
    post:
      summary: Добавить новую камеру
      description: Создает новую камеру с указанными данными для клиента.
      operationId: addCamera
      tags:
        - Камеры
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Название камеры
                  example: Camera 1
                camera_url:
                  type: string
                  description: URL камеры
                  example: http://camera.example.com/stream
              required:
                - name
                - camera_url
      responses:
        '201':
          description: Камера добавлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Уникальный идентификатор камеры
                    example: 1
                  name:
                    type: string
                    description: Название камеры
                    example: Camera 1
                  status:
                    type: string
                    description: Статус камеры
                    enum: ["active", "non-active", "deleted"]
                    example: active
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Invalid camera data
                required:
                  - error
  /cameras/{cameraId}:
    get:
      tags:
        - Камеры
      summary: Получить информацию о камере по ID
      parameters:
        - $ref: '#/components/parameters/cameraId'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Информация о камере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '404':
          description: Камера не найдена
    patch:
      tags:
        - Камеры
      summary: Обновить информацию о камере
      parameters:
        - $ref: '#/components/parameters/cameraId'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraUpdate'
      responses:
        '200':
          description: Камера успешно обновлена
        '400':
          description: Неверные данные
        '403':
          description: Нет прав
        '404':
          description: Камера не найдена
  /cameras/{cameraId}/soft:
    delete:
      tags:
        - Камеры
      summary: Переместить камеру в корзину (мягкое удаление)
      description: Устанавливает статус камеры 'deleted' и заполняет 'deleted_at'. Связанные дефекты не затрагиваются на этом этапе.
      parameters:
        - $ref: '#/components/parameters/cameraId'
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Камера перемещена в корзину
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Камера не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cameras/{cameraId}/permanently:
    delete:
      tags:
        - Камеры
      summary: Удалить камеру навсегда (из корзины)
      description: Полностью удаляет камеру и все связанные с ней сущности (продукты, инспекции, дефекты) из базы данных. Применяется к камерам в корзине со статусом 'deleted'.
      parameters:
        - $ref: '#/components/parameters/cameraId'
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Камера и связанные сущности удалены навсегда
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Камера не найдена (возможно, не в корзине или уже удалена)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cameras/permanently/range:
    delete:
      tags:
        - Камеры
      summary: Удалить камеры в временном интервале
      description: Удаляет камеры, находящиеся во временном интервале (по дате создания).
      parameters:
        - name: start_date
          in: query
          required: true
          description: Начальная дата
          schema:
            type: string
            format: date-time
            example: 2025-06-02T13:10:00Z
        - name: end_date
          in: query
          required: true
          description: Конечная дата
          schema:
            type: string
            format: date-time
            example: 2025-06-02T13:10:00Z
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Камеры успешно удалены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Клиент не аутентифицирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cameras/permanently/all:
    delete:
      tags:
        - Камеры
      summary: Удалить все камеры из корзины
      description: Удаляет все камеры, находящиеся в корзине
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Камеры успешно удалены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Клиент не аутентифицирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cameras/cameraId}/soft-clean:
    post:
      tags:
        - Камеры
      summary: Очистить историю дефектов камеры
      description: Переносит в корзину все дефекты, принадлежащие этой камере.
      parameters:
        - name: camera_id
          in: path
          required: true
          description: ID камеры
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: История успешно очищена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на операцию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Клиент не аутентифицирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cameras/{cameraId}/restore:
    patch:
      tags:
        - Камеры
      summary: Восстановить камеру из корзины
      description: Восстанавливает камеру, ранее перемещенную в корзину (статус 'deleted'), изменяя ее статус на 'active' и очищая 'deleted_at'.
      parameters:
        - $ref: '#/components/parameters/cameraId'
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Камера успешно восстановлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на восстановление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Камера не найдена в корзине
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inspections/real:
    post:
      summary: Провести инспекцию продукта
      description: Создает новую инспекцию продукта с загрузкой изображения для анализа дефектов.
      operationId: inspectProduct
      tags:
        - Инспекции
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                batch_number:
                  type: string
                  description: Номер партии продукта
                  example: BATCH-001
                camera_id:
                  type: integer
                  description: Идентификатор камеры
                  example: 1
                image:
                  type: string
                  format: binary
                  description: Изображение продукта для анализа
              required:
                - batch_number
                - camera_id
                - image
      responses:
        '201':
          description: Инспекция успешно проведена
          content:
            application/json:
              schema:
                type: object
                properties:
                  inspection_id:
                    type: integer
                    description: Уникальный идентификатор инспекции
                    example: 1
                  result:
                    type: string
                    description: Результат инспекции
                    enum: ["defective", "intact"]
                    example: intact
                  product_id:
                    type: integer
                    description: Уникальный идентификатор продукта
                    example: 1
                  camera_id:
                    type: integer
                    description: Идентификатор камеры
                    example: 1
                  image:
                    type: string
                    description: URL изображения, загруженного для инспекции
                    example: http://minio.example.com/inspection-image.jpg
                  defects_count:
                    type: integer
                    description: Количество обнаруженных дефектов
                    example: 2
                  defects:
                    type: array
                    description: Список обнаруженных дефектов
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                          description: Метка дефекта
                          example: scratch
                        confidence:
                          type: number
                          description: Уверенность модели в дефекте
                          example: 0.95
                        x:
                          type: number
                          description: Координата X ограничивающего прямоугольника
                          example: 100
                        y:
                          type: number
                          description: Координата Y ограничивающего прямоугольника
                          example: 150
                        width:
                          type: number
                          description: Ширина ограничивающего прямоугольника
                          example: 50
                        height:
                          type: number
                          description: Высота ограничивающего прямоугольника
                          example: 30
                      required:
                        - label
                        - confidence
                        - x
                        - y
                        - width
                        - height
                required:
                  - inspection_id
                  - result
                  - product_id
                  - camera_id
                  - image
                  - defects_count
                  - defects
        '400':
          description: Ошибка при создании инспекции
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Invalid image format
                required:
                  - error
  /inspections/test:
    post:
      summary: Провести тестовую инспекцию продукта
      description: Создает новую инспекцию продукта БЕЗ загрузки изображения для анализа дефектов,\
        берёт одно и то же изображение из проекта.
      tags:
        - Инспекции
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                batch_number:
                  type: string
                  description: Номер партии продукта
                  example: BATCH-001
                camera_id:
                  type: integer
                  description: Идентификатор камеры
                  example: 1
              required:
                - batch_number
                - camera_id
      responses:
        '201':
          description: Инспекция успешно проведена
          content:
            application/json:
              schema:
                type: object
                properties:
                  inspection_id:
                    type: integer
                    description: Уникальный идентификатор инспекции
                    example: 1
                  result:
                    type: string
                    description: Результат инспекции
                    enum: [ "defective", "intact" ]
                    example: intact
                  product_id:
                    type: integer
                    description: Уникальный идентификатор продукта
                    example: 1
                  camera_id:
                    type: integer
                    description: Идентификатор камеры
                    example: 1
                  image:
                    type: string
                    description: URL изображения, загруженного для инспекции
                    example: http://minio.example.com/inspection-image.jpg
                  defects_count:
                    type: integer
                    description: Количество обнаруженных дефектов
                    example: 2
                  defects:
                    type: array
                    description: Список обнаруженных дефектов
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                          description: Метка дефекта
                          example: scratch
                        confidence:
                          type: number
                          description: Уверенность модели в дефекте
                          example: 0.95
                        x:
                          type: number
                          description: Координата X ограничивающего прямоугольника
                          example: 100
                        y:
                          type: number
                          description: Координата Y ограничивающего прямоугольника
                          example: 150
                        width:
                          type: number
                          description: Ширина ограничивающего прямоугольника
                          example: 50
                        height:
                          type: number
                          description: Высота ограничивающего прямоугольника
                          example: 30
                      required:
                        - label
                        - confidence
                        - x
                        - y
                        - width
                        - height
                required:
                  - inspection_id
                  - result
                  - product_id
                  - camera_id
                  - image
                  - defects_count
                  - defects
        '400':
          description: Ошибка при создании инспекции
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Сообщение об ошибке
                    example: Invalid image format
                required:
                  - error
  /defects:
    get:
      summary: Получить все обнаруженные дефекты
      description: Возвращает список камер с их обнаруженными дефектами для текущего клиента.
      operationId: getAllDefects
      tags:
        - Дефекты
      responses:
        '200':
          description: Список дефектов
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    camera_id:
                      type: integer
                      description: Уникальный идентификатор камеры
                      example: 1
                    defects:
                      type: array
                      description: Список дефектов для камеры
                      items:
                        type: object
                        properties:
                          defect_id:
                            type: integer
                            description: Уникальный идентификатор дефекта
                            example: 1
                          inspection_id:
                            type: integer
                            description: Уникальный идентификатор инспекции
                            example: 1
                          product_id:
                            type: integer
                            description: Уникальный идентификатор продукта
                            example: 1
                          label:
                            type: string
                            description: Метка дефекта
                            example: crack
                          confidence:
                            type: number
                            description: Уверенность модели в дефекте
                            example: 0.95
                          timestamp:
                            type: string
                            description: Время проведения инспекции
                            example: "17:29:00 17.05.2025"
                          download_image_url:
                            type: string
                            description: URL для скачивания изображения с дефектом
                            example: http://minio.example.com/image.jpg?download
                          uptime:
                            type: string
                            description: Время работы камеры с момента первой инспекции
                            example: "0:00:08"
                          defect_percent:
                            type: number
                            description: Процент дефектных инспекций для камеры
                            example: 25.5
                        required:
                          - defect_id
                          - inspection_id
                          - product_id
                          - label
                          - confidence
                          - timestamp
                          - download_image_url
                          - uptime
                          - defect_percent
                  required:
                    - camera_id
                    - defects
  /defects/camera/{camera_id}:
    get:
      summary: Получить дефекты для камеры
      description: Возвращает список дефектов, связанных с указанной камерой и текущим клиентом.
      operationId: getCameraDefects
      tags:
        - Дефекты
      parameters:
        - name: camera_id
          in: path
          required: true
          description: Уникальный идентификатор камеры
          schema:
            type: integer
      responses:
        '200':
          description: Список дефектов для камеры
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    defect_id:
                      type: integer
                      description: Уникальный идентификатор дефекта
                      example: 1
                    inspection_id:
                      type: integer
                      description: Уникальный идентификатор инспекции
                      example: 1
                    product_id:
                      type: integer
                      description: Уникальный идентификатор продукта
                      example: 1
                    label:
                      type: string
                      description: Метка дефекта
                      example: crack
                    confidence:
                      type: number
                      format: float
                      description: Уверенность модели в дефекте (округлено до двух знаков)
                      example: 0.99
                    timestamp:
                      type: string
                      description: Время проведения инспекции в формате ЧЧ:ММ:СС ДД.ММ.ГГГГ
                      example: "14:33:19 17.05.2025"
                    download_image_url:
                      type: string
                      description: URL для скачивания изображения с дефектом
                      example: http://minio:9000/inspections/63015200-2d06-4c21-b585-41046ec5784b_panel_19.jpg?download
                    uptime:
                      type: string
                      description: Время работы камеры с момента первой инспекции
                      example: "0:00:08"
                    defect_percent:
                      type: number
                      format: float
                      description: Процент дефектных инспекций для камеры
                      example: 100.0
                  required:
                    - defect_id
                    - inspection_id
                    - product_id
                    - label
                    - confidence
                    - timestamp
                    - download_image_url
                    - uptime
                    - defect_percent
  /defects/{defectId}/soft:
    delete:
      tags:
        - Дефекты
      summary: Переместить дефект в корзину (мягкое удаление)
      description: Устанавливает статус дефекта 'deleted'.
      parameters:
        - $ref: '#/components/parameters/defectId'
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Дефект перемещен в корзину
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Дефект не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /defects/{defectId}/permanently:
    delete:
      tags:
        - Дефекты
      summary: Удалить дефект навсегда (из корзины)
      description: Полностью удаляет дефект из базы данных. Применяется к дефектам в корзине со статусом 'deleted'.
      parameters:
        - $ref: '#/components/parameters/defectId'
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Дефект удален навсегда
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Дефект не найден (возможно, не в корзине или уже удален)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /defects/permanently/range:
    delete:
      tags:
        - Дефекты
      summary: Удалить дефекты в временном интервале
      description: Окончательно удаляет дефекты из корзины, находящиеся во временном интервале (по дате создания).
      parameters:
        - name: start_date
          in: query
          required: true
          description: Начальная дата
          schema:
            type: string
            format: date-time
            example: 2025-06-02T13:10:00Z
        - name: end_date
          in: query
          required: true
          description: Конечная дата
          schema:
            type: string
            format: date-time
            example: 2025-06-02T13:10:00Z
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Дефекты успешно удалены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Клиент не аутентифицирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /defects/permanently/all:
    delete:
      tags:
        - Дефекты
      summary: Удалить все дефекты из корзины
      description: Окончательно удаляет все дефекты из корзины
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Дефекты успешно удалены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на удаление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Клиент не аутентифицирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /defects/{defectId}/restore:
    patch:
      tags:
        - Дефекты
      summary: Восстановить дефект из корзины
      description: Восстанавливает дефект, ранее перемещенный в корзину (статус 'deleted'), изменяя его статус на 'active'.
      parameters:
        - $ref: '#/components/parameters/defectId'
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Дефект успешно восстановлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Нет прав на восстановление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Дефект не найден в корзине
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ai/config:
    put:
      summary: Update AI defect sensitivity
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sensitivity:
                  type: object
      responses:
        '200':
          description: AI settings updated
  /analytics/export:
    get:
      summary: Export analytics data
      deprecated: true
      parameters:
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [ "pdf", "excel" ]
      responses:
        '200':
          description: Экспортированный файл
  /analytics/summary:
    get:
      summary: Получить статистику клиента
      deprecated: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Сводная статистика
  /payments/create-session:
    post:
      summary: Создание сессии оплаты
      deprecated: true
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tariff_id:
                  type: integer
      responses:
        '201':
          description: Ссылка на оплату создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment_url:
                    type: string
                  amount:
                    type: integer
        '403':
          description: Доступ только для владельца
        '400':
          description: Ошибка создания платежа
  /payments/webhook:
    post:
      summary: Обработка уведомления об оплате от FreeKassa
      deprecated: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                MERCHANT_ID:
                  type: string
                AMOUNT:
                  type: string
                MERCHANT_ORDER_ID:
                  type: string
                SIGN:
                  type: string
      responses:
        '200':
          description: Успешно обработано (ожидается ответ YES)
        '400':
          description: Ошибка проверки подписи или данных

components:
  schemas:
    AuthSuccessResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access токен
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ItCY0LLQsNC9INCf0LXRgtGA0L7QsiIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        refresh_token:
          type: string
          description: JWT refresh токен для обновления access токена
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ItCY0LLQsNC9INCf0LXRgtGA0L7QsiIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Описание ошибки"
    Camera:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Камера №1"
        camera_url:
          type: string
          example: "rtsp://..."
        status:
          type: string
          example: "active"
          description: "Текущий статус камеры. Может быть 'active', 'non-active', 'deleted'."
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: "Дата и время мягкого удаления. null, если камера не удалена."
    CameraUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Новое имя камеры"
        camera_url:
          type: string
          example: "rtsp://new_url"
    Defect:
      type: object
      properties:
        id:
          type: integer
          example: 101
        status:
          type: string
          example: "active"
          description: "Текущий статус дефекта. Может быть 'active', 'deleted'."
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Операция выполнена успешно"
  parameters:
    cameraId:
      name: cameraId
      in: path
      required: true
      description: ID камеры
      schema:
        type: integer
        example: 1
    defectId:
      name: defectId
      in: path
      required: true
      description: ID дефекта
      schema:
        type: integer
        example: 101
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT